// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]
  events    Event[]
  orders    Order[]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

model Product {
  id        String         @id @default(uuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  price     Decimal        @db.Decimal(10, 2)
  cost      Decimal        @db.Decimal(10, 2)
  status    ProductStatus  @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  events    EventProduct[]
}

enum EventCategory {
  FAIR
  EVENT
}

enum EventStatus {
  ACTIVE
  INACTIVE
}

enum EventRecurrence {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
}

model Event {
  id              String           @id @default(uuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  description     String
  notes           Json?
  category        EventCategory
  status          EventStatus      @default(ACTIVE)
  recurrence      EventRecurrence  @default(NONE)
  startDate       DateTime
  endDate         DateTime
  photo           String?
  checklist       Json?
  commissionRate  Decimal?         @db.Decimal(5, 2)
  participationFee Decimal?        @db.Decimal(10, 2)
  contactInfo     Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  address         Address?
  occurrences     EventOccurrence[]
  products        EventProduct[]
  orders          Order[]
}

model Address {
  id          String   @id @default(uuid())
  eventId     String   @unique
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  street      String
  number      String?
  complement  String?
  neighborhood String
  city        String
  state       String
  zipCode     String
  country     String   @default("Brasil")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EventOccurrence {
  id        String   @id @default(uuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  date      DateTime
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventProduct {
  id        String   @id @default(uuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  OrderItem OrderItem[]

  @@unique([eventId, productId])
}

enum OrderStatus {
  CREATED
  EXPIRED
  CANCELED
  AT_TERMINAL
  PROCESSED
  REFUNDED
  FAILED
  ACTION_REQUIRED
}

enum PaymentMethod {
  CARD
  PIX
  CASH
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  externalRef String?
  mercadoPagoId String?
  qrCode String?
  qrCodeBase64 String?

  status OrderStatus
  amount Decimal @db.Decimal(10, 2)
  paymentMethod PaymentMethod

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items  OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  eventProductId String
  eventProduct EventProduct @relation(fields: [eventProductId], references: [id], onDelete: Cascade)
  
  quantity Int
  total Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, eventProductId])
}
